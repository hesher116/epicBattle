package models

import (
	"errors"
	"fmt"
	"github.com/main_projects/bbot/epic_battle/internal/utils"
	"github.com/main_projects/bbot/epic_battle/pkg/config"
)

const (
	FirebreathMultiplier = 2
	MaxChancePercentage  = 100
	MinHeads             = 1
)

type DragonAbility struct {
	Used        bool
	Description string
	Effect      string
}

type Dragon struct {
	Heads      int
	config     config.GameConfig
	Firebreath DragonAbility
	Stun       DragonAbility
}

func NewDragon(cfg config.GameConfig) (*Dragon, error) {
	if err := validateDragonConfig(cfg); err != nil {
		return nil, fmt.Errorf("–Ω–µ–≤–∞–ª—ñ–¥–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –¥—Ä–∞–∫–æ–Ω–∞: %w", err)
	}

	return &Dragon{
		Heads:      utils.RandomInt(cfg.InitialDragonHeadsMin, cfg.InitialDragonHeadsMax),
		config:     cfg,
		Firebreath: DragonAbility{Used: false},
		Stun:       DragonAbility{Used: false},
	}, nil
}

func validateDragonConfig(cfg config.GameConfig) error {
	if cfg.InitialDragonHeadsMin < MinHeads {
		return fmt.Errorf("–º—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥–æ–ª—ñ–≤ –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ %d", MinHeads)
	}
	if cfg.FirebreathChance < 0 || cfg.FirebreathChance > MaxChancePercentage {
		return errors.New("—à–∞–Ω—Å –≤–æ–≥–Ω—è–Ω–æ–≥–æ –ø–æ–¥–∏—Ö—É –º–∞—î –±—É—Ç–∏ –º—ñ–∂ 0 —Ç–∞ 100")
	}
	if cfg.StunChance < 0 || cfg.StunChance > MaxChancePercentage {
		return errors.New("—à–∞–Ω—Å –æ–≥–ª—É—à–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –º—ñ–∂ 0 —Ç–∞ 100")
	}
	return nil
}

func (d *Dragon) UseAbilities(hero *Hero) DragonAbility {
	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —à–∞–Ω—Å –≤–æ–≥–Ω—è–Ω–æ–≥–æ –ø–æ–¥–∏—Ö—É
	if utils.RandomInt(1, 100) <= d.config.FirebreathChance {
		d.Firebreath.Used = true
		return DragonAbility{
			Used:        true,
			Description: "üî• –ó–º—ñ–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –í–û–ì–ù–Ø–ù–ò–ô –ü–û–î–ò–•",
			Effect:      "—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–æ–¥–≤–æ—î–Ω–∞!",
		}
	}

	// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —à–∞–Ω—Å –æ–≥–ª—É—à–µ–Ω–Ω—è
	if utils.RandomInt(1, 100) <= d.config.StunChance {
		d.Stun.Used = true
		hero.Stunned = true
		return DragonAbility{
			Used:        true,
			Description: "üí´ –ó–º—ñ–π –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –û–ì–õ–£–®–õ–ò–í–ò–ô –†–ï–í",
			Effect:      "–±–æ–≥–∞—Ç–∏—Ä –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ö—ñ–¥!",
		}
	}

	return DragonAbility{Used: false}
}

func (d *Dragon) RegenerateHeads(cutHeads int, firebreathActive bool) int {
	multiplier := 1
	if firebreathActive {
		multiplier = FirebreathMultiplier
		d.Firebreath.Used = false
	}

	regeneratedHeads := 0
	for i := 0; i < cutHeads; i++ {
		chance := utils.RandomInt(1, 100)

		switch {
		case chance <= d.config.NoRegenChance:
			// –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥—Ä–æ—Å—Ç–∞—î
		case chance <= d.config.OneHeadChance:
			regeneratedHeads += 1 * multiplier
		case chance <= d.config.TwoHeadChance:
			regeneratedHeads += 2 * multiplier
		default:
			regeneratedHeads += 3 * multiplier
		}
	}
	return regeneratedHeads
}

func (d *Dragon) ResetAbilities() {
	d.Firebreath.Used = false
	d.Stun.Used = false
}
