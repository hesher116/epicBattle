package battle

import (
	"context"
	"fmt"
	"github.com/main_projects/bbot/epic_battle/internal/models"
	"github.com/main_projects/bbot/epic_battle/pkg/config"
	"github.com/main_projects/bbot/epic_battle/pkg/errors"
	"github.com/main_projects/bbot/epic_battle/pkg/logger"
)

func StartEpicBattle(ctx context.Context) error {
	cfg, err := config.LoadConfig(".env")
	if err != nil {
		return fmt.Errorf("–ø–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: %w", err)
	}

	if err := cfg.Validate(); err != nil {
		return fmt.Errorf("–Ω–µ–≤–∞–ª—ñ–¥–Ω–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è: %w", err)
	}

	hero, err := models.NewHero(cfg)
	if err != nil {
		return fmt.Errorf("–ø–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥–µ—Ä–æ—è: %w", err)
	}

	dragon, err := models.NewDragon(cfg)
	if err != nil {
		return fmt.Errorf("–ø–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥—Ä–∞–∫–æ–Ω–∞: %w", err)
	}

	battle, err := models.NewBattle(hero, dragon, cfg)
	if err != nil {
		return fmt.Errorf("–ø–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–∏—Ç–≤–∏: %w", err)
	}

	logger.Info("–ë–∏—Ç–≤–∞ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è", logger.Fields{
		"hero_name":    hero.Name,
		"dragon_heads": dragon.Heads,
		"config":       cfg,
	})

	for {
		select {
		case <-ctx.Done():
			logger.Info("–ë–∏—Ç–≤–∞ –ø–µ—Ä–µ—Ä–≤–∞–Ω–∞", logger.Fields{
				"reason": "context cancelled",
				"round":  battle.Round,
			})
			return ctx.Err()
		default:
			err := battle.ExecuteRound()
			if err != nil {
				switch err.(type) {
				case *errors.HeroVictoryError:
					logger.Info("–ë–æ–≥–∞—Ç–∏—Ä –ø–µ—Ä–µ–º—ñ–≥!", logger.Fields{
						"rounds":       battle.Round,
						"dragon_heads": dragon.Heads,
					})
					fmt.Println("üéâ –£–†–ê! –ë–æ–≥–∞—Ç–∏—Ä –ø–µ—Ä–µ–º—ñ–≥! –¶–∞—Ä—Å—Ç–≤–æ –≤—Ä—è—Ç–æ–≤–∞–Ω–µ!")
				case *errors.DragonVictoryError:
					logger.Error("–ó–º—ñ–π –ø–µ—Ä–µ–º—ñ–≥!", logger.Fields{
						"rounds":       battle.Round,
						"dragon_heads": dragon.Heads,
					})
					fmt.Println("üò≠ –û –Ω—ñ! –ó–º—ñ–π –ø–µ—Ä–µ–º—ñ–≥! –ë–æ–≥–∞—Ç–∏—Ä –≤—Ç—ñ–∫–∞—î!")
				case *errors.DragonPhobiaError:
					logger.Warn("–ó–º—ñ–π –≤—Ç—ñ–∫ —á–µ—Ä–µ–∑ —Ñ–æ–±—ñ—é!", logger.Fields{
						"rounds":       battle.Round,
						"dragon_heads": dragon.Heads,
					})
					fmt.Println("üòÖ –û–≥–æ! –ó–º—ñ–π —Ä–∞–ø—Ç–æ–≤–æ –≤—Ç—ñ–∫. –ü–µ—Ä–µ–º–æ–≥–∞?")
				default:
					logger.Error("–ù–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞", logger.Fields{
						"error":        err,
						"rounds":       battle.Round,
						"dragon_heads": dragon.Heads,
					})
					fmt.Println("ü§î –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫... –ë–∏—Ç–≤–∞ –∑–∞–∫—ñ–Ω—á–∏–ª–∞—Å—å –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–æ.")
				}
				return err
			}
		}
	}
}
